<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>1.0</FileVersion>
   <DriverName>lecroy_8600a.mdd</DriverName>
   <DriverType>MATLAB interface object</DriverType>
   <InstrumentType>Oscilloscope</InstrumentType>
   <InstrumentManufacturer>LeCroy</InstrumentManufacturer>
   <InstrumentModel>WaveSurfer510</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify/>
   <Reset/>
   <Selftest/>
   <Error/>
   <CreateInitCode>
      <Code>function init(obj)
% This method is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

% initializes driverData
driverData = get(obj, 'DriverData');
driverData.measurment.type='FREQ';
driverData.trace = 'TA';
driverData.measurment.source = 'C1';
driverData.sc = 'C1';
driverData.fc = 'C1';
driverData.source = 'C1';
driverData.header = [];

% Extract the interface object and configure it. 
% This driver will work with either TCPIP or GPIB.
interface = get(obj, 'Interface');
interfaceClass = class(interface);
driverData.isTcpip = strcmp('tcpip', interfaceClass);

% Save the DriverData
set(obj, 'DriverData', driverData);</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This method is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

% Get the Util group and Interface
util = get(obj, 'Util');
interface = get(obj, 'Interface');

% Configure the buffer to allow space for the entire waveform.
MAX_HEADER = 1e3;
%memorySize = invoke(util, 'getproperty', 'Memory_SIZe?', '%u');
%memorySize = strrep(lower(memorySize),'k','000');
%memorySize = strrep(lower(memorySize),'m','000000');
%memorySize = strrep(lower(memorySize),'g','000000000');
%easier to just set to max here, also need factor of 2
memorySize = 20E6;
bufferSize = 2*memorySize + MAX_HEADER;

% Ensure that the interface is closed for configuration
if ~strcmp(get(interface, 'Status'), 'closed')
    fclose(interface); 
end

set(interface, 'InputBufferSize', bufferSize);
set(interface, 'OutputBufferSize', bufferSize);

if strcmp(get(interface, 'Status'), 'closed')
    fopen(interface);
end

% If HEADER is not OFF then responses retrieved from
% the device will not match what is expected, and the driver will not
% function properly.
invoke(util, 'sendcommand', 'COMM_HEADER OFF'); %ResponseHeaderState is readonly

% Clear the Standard Event Status Register (SESR) to remove possible Power
% on event, which would otherwise be returned by getError.
invoke(util, 'getproperty', 'CMR?', '%d');

%Set the scope to 16bit word in order to increase precision for waveform
%transfer
set(obj.Waveform, 'Precision', 'int16');


% LeCroy scopes publish the format of the waveform (WAVEDESC) with the 
% TEMPLATE? query.  By reading and parsing that, the code can determine
% where all of the fields in the waveform are regardless of changes to
% the scope.  

% Read WAVEDESC header
invoke(util, 'sendcommand', 'TEMPLATE?');
template = char(invoke(util, 'readbin', 'int8')');

% Extract the starting and ending blocks for each field of the 
% waveform template.
idxWaveDesc = regexp(template,'(WAVEDESC: BLOCK)|(ENDBLOCK)','start');
templateStruct=regexp(template(idxWaveDesc(1): idxWaveDesc(2)),...
    '&lt;(?&lt;idxStart&gt;[0-9 ]*)&gt;[\s]*(?&lt;name&gt;[\w]+):\s*(?&lt;type&gt;[\w]+)','names');

% Convert the indexes (currently character arrays) to numbers and account
% for the initial byte offset (headerOffset) to index into the waveform.  
% Additionally, convert the known types in the waveform to MATLAB types.  
% Not all possible types are accounted for.

headerOffset = 16; 

for i=1:length(templateStruct)
    % convert to numbers (from chars) and add byte offset
    templateStruct(i).idxStart = ...
        str2num(templateStruct(i).idxStart) + headerOffset;
    
    % convert template type names to MATLAB types
    templateValues = {'string', 'byte', 'word',  'long',  'float',  'double', 'text', 'unit_definition'};
    matlabValues = {  'char',   'int8', 'int16', 'int32', 'single', 'double', 'uint8', 'uint8'};
    idx = strmatch(templateStruct(i).type, templateValues);
    if ~isempty(idx)
        templateStruct(i).type = matlabValues{idx};
    end
end

% This parses all but the last item of the of the template because
% the last item isn't necessary and the code is cleaner.
% Store the starting and ending field indices under fieldnames (where the 
% name is the property name from the waveform header) of a structure.
for i=1:length(templateStruct)-1
    wd.(templateStruct(i).name).idxStart = ...
        templateStruct(i).idxStart;
    wd.(templateStruct(i).name).idxEnd = ...
        templateStruct(i+1).idxStart - 1; %it ends at the start of the next item
    wd.(templateStruct(i).name).type = templateStruct(i).type;
end

% A function to extract a field, TYPECAST it and return a double representation
% of the value.
makeTemplateParser = @(field) ...
    @(wform) double(typecast(...
    int8(wform(field.idxStart:field.idxEnd)), ...
    field.type));

% A function to modify the above function to return a deblanked string.
makeTextParser = @(fcn) ...
    @(wform) deblank(char(fcn(wform)));

driverData = get(obj, 'DriverData');

% Using the above defined functions, I can create extractor functions
% which will extract the desired field from a given waveform header.
driverData.wd.getWAVE_ARRAY_COUNT = makeTemplateParser(wd.WAVE_ARRAY_COUNT);
driverData.wd.getHORIZ_INTERVAL   = makeTemplateParser(wd.HORIZ_INTERVAL);
driverData.wd.getHORIZ_OFFSET     = makeTemplateParser(wd.HORIZ_OFFSET);
driverData.wd.getHORUNIT          = makeTextParser(makeTemplateParser(wd.HORUNIT));
driverData.wd.getVERTICAL_GAIN    = makeTemplateParser(wd.VERTICAL_GAIN);
driverData.wd.getVERTICAL_OFFSET  = makeTemplateParser(wd.VERTICAL_OFFSET);
driverData.wd.getVERTUNIT         = makeTextParser(makeTemplateParser(wd.VERTUNIT));

%added functions to increase wf? options
driverData.wd.getCOMM_TYPE  = makeTemplateParser(wd.COMM_TYPE);
driverData.wd.getWAVE_ARRAY_1  = makeTemplateParser(wd.WAVE_ARRAY_1);
driverData.wd.getWAVE_DESCRIPTOR  = makeTemplateParser(wd.WAVE_DESCRIPTOR);
set(obj, 'DriverData', driverData);

 



</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>MCode</Type>
      <Code>function cleanup(obj)
% This function is called before the object is disconnected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Date</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% Query the instrument.
propertyValue = invoke(get(obj, 'Util'), 'getproperty', 'DATE?', '%s');
propertyValue = datenum(propertyValue, 'dd,mmm,yyyy,HH,MM,SS'); %convert the string response</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% Convert from the datenum to a string if a datenum is passed
if ischar(propertyValue)
    % pass SNTP through
    argument = propertyValue; 
else
    % convert to datestr
    argument = datestr(propertyValue, 'dd,mmm,yyyy,HH,MM,SS'); 
end
% determines what code to send to the instrument
to_interface = sprintf('DATE %s', argument);

% sets the instrument
invoke(get(obj, 'Util'), 'sendcommand', to_interface);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="sntp" Value="SNTP"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Queries the oscilloscope's internal date. The argument and return value is a MATLAB datenum.  </Description>
            </Property>
            <Property>
               <Name>Identity</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
propertyValue = invoke(get(obj, 'Util'), 'getproperty', '*IDN?', '%s');</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>ResponseHeaderState</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
propertyValue = invoke(get(obj, 'Util'), 'getproperty', 'COMM_HEADER?', '%s');
mlValues = {'on', 'off'};
instrValues = {'ON', 'OFF'};
propertyValue = mlValues{strmatch(propertyValue, instrValues)};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="ON"/>
                     <Enum Name="off" Value="OFF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Queries the Response Header Enable State that causes the oscilloscope to either include or omit headers on query responses.

NOTE: Although the property is not truly read only for the instrument, the value must be 'off' for the driver to operate correctly.  As a result, it is set as read-only for the driver.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>autoset</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function autoset(obj)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.
invoke(get(obj, 'Util'), 'sendcommand', 'AUTO_SETUP');</MCode>
               </Code>
               <Description>AUTOSET Automatic parameter adjustment.

INVOKE(OBJ, 'autoset') causes the oscilloscope to adjust its vertical, horizontal, and trigger controls to display a more stable waveform.</Description>
            </Method>
            <Method>
               <Name>beep</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function beep(obj, state)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

invoke(get(obj, 'Util'), 'sendcommand', 'BUZZ BEEP');</MCode>
               </Code>
               <Description>BEEP controls the built-in piezo-electric buzzer.

INVOKE(OBJ,'beep') causes the buzzer to sound briefly.</Description>
            </Method>
            <Method>
               <Name>drivertest</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = drivertest(obj)
%   This is the machine generated code that tests a MATLAB instrument driver, 
%   lecroy_8600a.mdd.
%   
%   The test consists of multiple test steps that can test the MATLAB instrument
%   drivers functions and properties.
%   
%   The test code was generated with the MIDTEST GUI. For more information
%   on MIDTEST, type 'instrhelp midtest' at the MATLAB command prompt.
%   
%   To run the test, invoke the drivertest function using the following
%   command:
%   status = invoke(obj,'drivertest'); % Where obj is the device object
%  
%   See also ICDEVICE, MIDTEST.
% 
 
%   Creation time: 06-May-2006 
 
%% Initialization and connect code
% Wrap entire test in try catch.
try

fprintf('Test: LeCroy_Wavesurfer_510_propertiesTest\n');
fprintf(['Start time: ' datestr(now) '\n']);

% Initialize variables.
varargout              = {};
noErrorMsg             = '0;0';
stepWarningOccurred    = false;
warningOccurred        = false;
errorOccurred          = false;
 
% Construct the device object.
deviceObj = obj;

%% Save State
% Function_savestate (Function Test Step)
fprintf('%s\n','Test Step 1a: Save state');

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'System');
    groupObj = groupObj(1);
    invoke(groupObj, 'savestate', 5);
    pause(20);     % wait for instrument to save state
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result '\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr '\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Default Setup
% Function_defaultSetup (Function Test Step)
fprintf('%s\n','Test Step 1b: DefaultSetup');

errorcode = false;
try
    % Execute the function.
    invoke(deviceObj, 'reset');
    pause(20);     % wait for instrument to go back to default setup
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result '\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr '\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Function:Parent:Autoset
fprintf('%s\n','Test Step 1c: Autoset');
% Test Step 9: Function:Parent:Autoset (Function Test Step)

errorcode = false;
try
    % Execute the function.
    invoke(deviceObj, 'autoset');
    pause(20); % need to wait for the instrument to finish autoset 
    
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result '\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr '\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Read waveform
% Test Step 1d: Function_readwaveform (Function Test Step)
fprintf('%s\n','Test Step 1d: Read Waveform');

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Waveform');
    groupObj = groupObj(1);
    [y,x] = invoke(groupObj, 'readwaveform', 'channel1');
    pause(20);     % wait for the read operation to finish
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, y,x};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result '\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr '\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Store Waveform
% Test Step 1e: Function_storewaveform (Function Test Step)
fprintf('%s\n','Test Step 1e: Store Waveform');

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Waveform');
    groupObj = groupObj(1);
    invoke(groupObj, 'storewaveform','channel1','memory1');
    pause(20);     % wait for instrument to store waveform
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result '\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr '\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Get_Parent:Date
% Test Step 2: Get_Date (Get Property Test Step)
fprintf('%s\n','Test Step 2: Get_Parent:Date');

errorcode = false;
try
    % Query the property.
    temp = get(deviceObj, 'Date');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% SET Parent:Date
% Test Step 3: Set_Date (Set Property Test Step)
fprintf('%s\n','Test Step 3: Get_Parent:Date');

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Date', 'sntp');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 4: Get_Parent:Identity
fprintf('%s\n','Test Step 4: Get_Parent:Identity');
% Test Step 4: Get_Parent:Identity (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    temp = get(deviceObj, 'identity');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 5: Set_Acquisition:Timebase
fprintf('%s\n','Test Step 5: Set_Acquisition:Timebase');
% Test Step 4: Set_Acquisition:Timebase (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Acquisition');
    groupObj = groupObj(1);
    set(groupObj, 'Timebase', 50e-9);
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Timebase');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 50e-9);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: 50e-9\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 6: Set_Acquisition:Delay_test1
fprintf('%s\n','Test Step 6: Set_Acquisition:Delay_test1');
% Test Step 6: Set_Acquisition:Delay_test1 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Acquisition');
    groupObj = groupObj(1);
    set(groupObj, 'Delay', 10e-9);
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Delay');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 10e-9);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: 10e-9\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 7: Set_Acquisition:Delay_test2
fprintf('%s\n','Test Step 7: Set_Acquisition:Delay_test2');
% Test Step 7: Set_Acquisition:Delay_test2 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Acquisition');
    groupObj = groupObj(1);
    set(groupObj, 'Delay', 0);
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Delay');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 0.0);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: 0.0\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 8: Set_Acquisition:Control
fprintf('%s\n','Test Step 8: Set_Acquisition:Control');
% Test Step 8: Set_Acquisition:Control (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Acquisition');
    groupObj = groupObj(1);
    set(groupObj, 'Control', 'stop');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Control');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'stop');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: stop\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 9: Function:Parent:Autoset
fprintf('%s\n','Test Step 9: Function:Parent:Autoset');
% Test Step 9: Function:Parent:Autoset (Function Test Step)

errorcode = false;
try
    % Execute the function.
    invoke(deviceObj, 'autoset');
    pause(20); % need to wait for the instrument to finish autoset 
    
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result '\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr '\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 10: Get_Acquisition:State
fprintf('%s\n','Test Step 10: Get_Acquisition:State');
% Test Step 10: Get_Acquisition:State (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Acquisition');
    groupObj = groupObj(1);
    temp = get(groupObj, 'Control');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
catch
    % A MATLAB error occurred.
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(temp, 'auto');
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.\n');
    
        % Post actual value.
        if isnumeric(temp)
            fprintf(['Actual value: ' num2str(temp)]);
        else
            fprintf(['Actual value: ' temp]);
        end
    
        % Post expected value.
        fprintf('Expected value: ''auto''\n');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 11: Set_Channel:Bandwidth
fprintf('%s\n','Test Step 11: Set_Channel:Bandwidth');
% Test Step 11: Set_Channel:Bandwidth (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Channel');
    set(groupObj, 'BandwidthLimit', 'on');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'BandwidthLimit'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('on');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c) '\n']);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c '\n']);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: on\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 12: Set_Channel:Coupling
fprintf('%s\n','Test Step 12: Set_Channel:Coupling');
% Test Step 12: Set_Channel:Coupling (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Channel');
    set(groupObj, 'Coupling', '50ohms');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'Coupling'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('50ohms');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c) '\n']);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c '\n']);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 50ohms\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 13: Set_Channel:Position
fprintf('%s\n','Test Step 13: Set_Channel:Position');
% Test Step 13: Set_Channel:Position (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Channel');
    set(groupObj, 'Position', 0);
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'Position'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(0);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c) '\n']);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c '\n']);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 0\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 14: Set_Channel:Probe
fprintf('%s\n','Test Step 14: Set_Channel:Probe');
% Test Step 14: Set_Channel:Probe (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Channel');
    set(groupObj, 'Probe', 20);
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'Probe'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(20);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c) '\n']);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c '\n']);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 20\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 15: Set_Channel:Scale
fprintf('%s\n','Test Step 15: Set_Channel:Scale');
% Test Step 15: Set_Channel:Scale (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Channel');
    set(groupObj, 'Scale', 1);
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'Scale'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(1);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c) '\n']);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c '\n']);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 1\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 16a: Set_Channel:State
fprintf('%s\n','Test Step 16a: Set_Channel:State');
% Test Step 16a: Set_Channel:State (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Channel');
    set(groupObj, 'State', 'off');
    pause(5); % instrument takes some time to turn off all the channels
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'State'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('off');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c) '\n']);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c '\n']);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: off\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 16b: Set_Channel:State
fprintf('%s\n','Test Step 16b: Set_Channel:State');
% Test Step 16b: Set_Channel:State (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Channel');
    set(groupObj, 'State', 'on');
    pause(5); % instrument takes some time to turn on all the channels
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'State'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('on');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c) '\n']);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c '\n']);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: on\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 17: Set_Cursor:Type
fprintf('%s\n','Test Step 17: Set_Cursor:Type');
% Test Step 17: Set_Cursor:Type (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Cursor');
    groupObj = groupObj(1);
    set(groupObj, 'CursorType', 'vertical absolute');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'CursorType');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'vertical absolute');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: vertical absolute\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 18: Set_Cursor:Source
fprintf('%s\n','Test Step 18: Set_Cursor:Source');
% Test Step 18: Set_Cursor:Source (Set Property Test Step)

% This test step generated no code. Most likely because a
% property or function to test was not selected.
fprintf('Test step status: PASSED\n');

%% Trigger
% Test Step 19a: Function_trigger (Function Test Step)
fprintf('%s\n','Test Step 19a: Trigger');

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Trigger');
    groupObj = groupObj(1);
    invoke(groupObj, 'trigger');
    pause(10);  % wait for the trigger call
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result '\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr '\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end


%% Test Step 19c: Set_Display:Contrast
fprintf('%s\n','Test Step 19: Set_Display:Contrast');
% Test Step 19: Set_Display:Contrast (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    set(groupObj, 'Contrast', 50.0);
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Contrast');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 50.0);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: 50.0\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 20: Set_Display:Grid 
fprintf('%s\n','Test Step 20: Set_Display:Grid');
% Test Step 20: Set_Display:Grid (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    set(groupObj, 'Grid', 'quad');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Grid');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'quad');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: quad\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 21: Set_Display:Persistence
fprintf('%s\n','Test Step 21: Set_Display:Persistence');
% Test Step 21: Set_Display:Persistence (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    set(groupObj, 'Persistence', 5);
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Persistence');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 5);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: 5\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 22: Set_Display:Style
fprintf('%s\n','Test Step 22: Set_Display:Style');
% Test Step 22: Set_Display:Style (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    set(groupObj, 'Style', 'vectors');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Style');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'vectors');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: vectors\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 23: Set_Measurement:Type
fprintf('%s\n','Test Step 23: Set_Measurement:Type');
% Test Step 23: Set_Measurement:Type (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Measurement');
    set(groupObj, 'MeasurementType', 'period');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'MeasurementType'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('period');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c) '\n']);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c '\n']);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: period\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 24: Set_Measurement:Source
fprintf('%s\n','Test Step 24: Set_Measurement:Source');
% Test Step 24: Set_Measurement:Source (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Measurement');
    set(groupObj, 'Source', 'channel2');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'Source'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('channel2');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c) '\n']);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c '\n']);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: channel2\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 25: Get_Measurement:Value
fprintf('%s\n','Test Step 25: Get_Measurement:Value');
% Test Step 25: Get_Measurement:Value (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Measurement');
    temp = get(groupObj, {'Value'});
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 26: Set_Sequence:Max
fprintf('%s\n','Test Step 26: Set_Sequence:Max');
% Test Step 26: Set_Sequence:Max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Sequence');
    groupObj = groupObj(1);
    set(groupObj, 'Max', 1000.0);
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Max');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 1000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: 1000\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 27: Set_Sequence:Mode
fprintf('%s\n','Test Step 27: Set_Sequence:Mode');
% Test Step 27: Set_Sequence:Mode (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Sequence');
    groupObj = groupObj(1);
    set(groupObj, 'Mode', 'on');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Mode');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'on');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: on\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 28: Set_Sequence:Segment
fprintf('%s\n','Test Step 28: Set_Sequence:Segment');
% Test Step 28: Set_Sequence:Segment (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Sequence');
    groupObj = groupObj(1);
    set(groupObj, 'Segment', 500.0);
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Segment');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 500.0);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: 500.0\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 29: Set_Trigger:Mode
fprintf('%s\n','Test Step 29: Set_Trigger:Mode');
% Test Step 29: Set_Trigger:Mode (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Trigger');
    groupObj = groupObj(1);
    set(groupObj, 'Mode', 'stop');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Mode');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'stop');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: stop\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 30: Set_Trigger:Slope
fprintf('%s\n','Test Step 30: Set_Trigger:Slope');
% Test Step 30: Set_Trigger:Slope (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Trigger');
    groupObj = groupObj(1);
    set(groupObj, 'Slope', 'falling');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Slope');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'falling');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: falling\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 31: Set_Trigger:Source
fprintf('%s\n','Test Step 31: Set_Trigger:Source');
% Test Step 31: Set_Trigger:Source (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Trigger');
    groupObj = groupObj(1);
    set(groupObj, 'Source', 'external');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Source');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'external');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: external\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 32: Set_Trigger:Type
fprintf('%s\n','Test Step 32: Set_Trigger:Type');
% Test Step 32: Set_Trigger:Type (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Trigger');
    groupObj = groupObj(1);
    set(groupObj, 'TriggerType', 'stateQualified');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'TriggerType');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'stateQualified');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: stateQualified\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 33: Set_Waveform:ByteOrder
fprintf('%s\n','Test Step 33: Set_Waveform:ByteOrder');
% Test Step 33: Set_Waveform:ByteOrder (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Waveform');
    groupObj = groupObj(1);
    set(groupObj, 'ByteOrder', 'bigEndian');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'ByteOrder');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'bigEndian');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: bigEndian\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 34: Set_Waveform:EndingPoint
fprintf('%s\n','Test Step 34: Set_Waveform:EndingPoint');
% Test Step 34: Set_Waveform:EndingPoint (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Waveform');
    groupObj = groupObj(1);
    set(groupObj, 'EndingPoint', 100);
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'EndingPoint');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 100);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: 100\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 35: Set_Waveform:FirstPoint
fprintf('%s\n','Test Step 35: Set_Waveform:FirstPoint');
% Test Step 35: Set_Waveform:FirstPoint (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Waveform');
    groupObj = groupObj(1);
    set(groupObj, 'MaxNumberPoint', 10);
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'MaxNumberPoint');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 10);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: 10\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 36: Set_Waveform:MaxNumberPoint
fprintf('%s\n','Test Step 36: Set_Waveform:MaxNumberPoint');
% Test Step 36: Set_Waveform:MaxNumberPoint (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Waveform');
    groupObj = groupObj(1);
    set(groupObj, 'MaxNumberPoint', 2000);
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'MaxNumberPoint');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 2000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: 2000\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Test Step 37: Set_Waveform:Precision
fprintf('%s\n','Test Step 37: Set_Waveform:Precision');
% Test Step 37: Set_Waveform:Precision (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Waveform');
    groupObj = groupObj(1);
    set(groupObj, 'Precision', 'int8');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Precision');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'int8');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.\n');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue) '\n']);
            else
                fprintf(['Actual value: ' currentValue '\n']);
            end
    
            % Post expected value.
            fprintf('Expected value: int8\n');
        end
 
        % Check if instrument error occurred.
        result = invoke(deviceObj,'queryError');
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.\n');
            fprintf([result '\n']);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr '\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Load Initial State 
% Test Step 38: Function_loadstate (Function Test Step)
fprintf('%s\n','Test Step 38: Load State');

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'System');
    groupObj = groupObj(1);
    invoke(groupObj, 'loadstate', 5);
    pause(10);   % wait for the instrument to get loaded properly
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'queryError');
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result '\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr '\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

%% Cleanup and Posting Results

% Post results.
fprintf(['Stop time: ' datestr(now) '\n']);
if (errorOccurred == true)
    fprintf('Test status: FAILED\n');
    status = 0;
elseif (warningOccurred == true)
    fprintf('Test status: PASSED with warnings\n');
    status = 1;
else
    fprintf('Test status: PASSED\n');
    status = 1;
end

catch
    % An error occurred while running the test.
    fprintf('An error occurred while executing the test.\n');
    fprintf([lasterr '\n']);
end

</MCode>
               </Code>
               <Description>This function is intended only to test the driver code with an instrument.  </Description>
            </Method>
            <Method>
               <Name>initiateSelfTest</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function initiateSelfTest(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
invoke(get(obj, 'Util'), 'sendcommand', '*TST?');</MCode>
               </Code>
               <Description>Start the instrument's built-in test routine.

INVOKE(obj, 'initiateSelfTest') initiates the instrument's test routine.

This is a workaround to a limitation of instrument drivers.  It replaces SELFTEST(ob).</Description>
            </Method>
            <Method>
               <Name>queryError</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function errormsg = queryError(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
errormsg = invoke(get(obj, 'Util'), 'getproperty', '*ESR?; CMR?', '%s');</MCode>
               </Code>
               <Description>Query the error code from the last command on the instrument.

INVOKE(obj, 'queryError') returns the error code from the instrument.

This is a workaround to a limitation of instrument drivers.  It replaces GETERROR(obj).</Description>
            </Method>
            <Method>
               <Name>reset</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function reset(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
invoke(get(obj, 'Util'), 'sendcommand', '*RST;COMM_HEADER OFF;');</MCode>
               </Code>
               <Description>Reset the state of the instrument to defaults.

INVOKE(obj, 'reset') returns the instrument to its default configuration.

This is a workaround to a limitation of instrument drivers.  It replaces DEVICERESET(obj).</Description>
            </Method>
            <Method>
               <Name>selfcalibrate</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function selfcalibrate(obj)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

invoke(get(obj, 'Util'), 'sendcommand', '*CAL?');</MCode>
               </Code>
               <Description>SELFCALIBRATE Performs an internal self-calibration.

INVOKE(obj, 'selfcalibrate') to self-calibrate the oscilloscope. This function does not return any status information.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>acquisition</Name>
         <Description>The aquisition group define properties and function related to how the waveform is acquired and the timebase.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Acquisition1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Control</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
propertyValue = invoke(get(get(obj, 'Parent'), 'Util'), 'getproperty', 'TRig_MoDe?', '%s');
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
invoke(get(get(obj, 'Parent'), 'Util'), 'setproperty', 'TRig_MoDe', propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="single" Value="SINGLE"/>
                     <Enum Name="normal" Value="NORMAL"/>
                     <Enum Name="stop" Value="STOP"/>
                     <Enum Name="auto" Value="AUTO"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>single</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Tells the oscilloscope when to stop taking acquisitions for edge trigger type. 

</Description>
            </Property>
            <Property>
               <Name>Delay</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
propertyValue = invoke(get(get(obj, 'Parent'), 'Util'), 'getproperty', 'TRig_DeLay?', '%g');</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
invoke(get(get(obj, 'Parent'), 'Util'), 'setproperty', 'TRig_DeLay', propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the capture offset from the trigger event.</Description>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
propertyValue = get(obj, 'Control');</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
invoke(set(obj, 'Control', propertyValue));</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="stop" Value="STOP"/>
                     <Enum Name="run" Value="NORM"/>
                     <Enum Name="auto" Value="AUTO"/>
                     <Enum Name="single" Value="SINGLE"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>run</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Starts or stops oscilloscope acquisitions.</Description>
            </Property>
            <Property>
               <Name>Timebase</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
propertyValue = invoke(get(get(obj, 'Parent'), 'Util'), 'getproperty', 'Time_DIV?', '%g');</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
invoke(get(get(obj, 'Parent'), 'Util'), 'setproperty', 'Time_DIV', propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="Infinity" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the time per divison for the main time base.  The instrument offers a large but discrete set of values for this property.  Incorrect values will be coerced to valid values by the instrument.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>channel</Name>
         <Description/>
         <Command/>
         <Size>4</Size>
         <Mappings>
            <ChannelMap Command="C4" Index="4"/>
            <ChannelMap Command="C3" Index="3"/>
            <ChannelMap Command="C2" Index="2"/>
            <ChannelMap Command="C1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>BandwidthLimit</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% queries the instrument
invoke(util, 'sendcommand', 'BandWidth_Limit?');

% retrieve the value from the instrument
idn = invoke(util, 'scanresponse');

% Bandwidth_limit is returned for every channel.  Return the channel of interest.
try
    %gets the hardware index number
    hw = obj(1).HwIndex;
    %There are two items returned for each channel:
    %channel then value.  We would like to index into the
    %value.
    hw = hw * 2; 

    % returns the value
    propertyValue = lower(idn{hw});
catch
    propertyValue = lower(idn{1});
end</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% get the hardware index number
hw = obj(1).HwIndex;

% determines what code to send to the instrument
to_interface = sprintf('BandWidth_Limit C%i,%s',hw,propertyValue);

% sets the instrument
invoke(util, 'sendcommand', to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="200mhz" Value="200MHZ"/>
                     <Enum Name="1ghz" Value="1GHZ"/>
                     <Enum Name="3ghz" Value="3GHZ"/>
                     <Enum Name="4ghz" Value="4GHZ"/>
                     <Enum Name="on" Value="20MHZ"/>
                     <Enum Name="off" Value="OFF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the bandwidth setting of the specified oscilloscope channel.

</Description>
            </Property>
            <Property>
               <Name>Coupling</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
 
% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');
 
% get the hardware index number
hw = obj.HwIndex;
 
% determines what code to send to the instrument
to_interface = sprintf('C%i:CouPLing?',hw);
 
% queries the instrument 
invoke(util, 'sendcommand', to_interface);
 
% retrieve the value from the instrument
value = invoke(util, 'scanresponse');
propertyValue = value{1};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% get the hardware index number
hw = obj.HwIndex;

% determines what code to send to the instrument
to_interface = sprintf('C%i:CouPLing %s', hw, propertyValue);

% sets the instrument
invoke(util, 'sendcommand', to_interface);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="ac" Value="A1M"/>
                     <Enum Name="dc" Value="D1M"/>
                     <Enum Name="ground" Value="GND"/>
                     <Enum Name="50ohms" Value="D50"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>ac</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Position</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% get the hardware index number
hw = obj(1).HwIndex;

% Query the instrument.
to_interface = sprintf('C%i:OFfSeT?', hw);
propertyValue = invoke(util, 'getproperty', to_interface, '%g');</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% get the hardware index number
hw = obj(1).HwIndex;

% determines what code to send to the instrument
to_interface = sprintf('C%i:OFfSeT %i', hw, propertyValue);

% sets the instrument
invoke(util, 'sendcommand', to_interface);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="10.0" Min="-10.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the vertical position of the specified oscilloscope channel.  

</Description>
            </Property>
            <Property>
               <Name>Probe</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% get the hardware index number
hw = obj(1).HwIndex;

% Query the instrument
to_interface = sprintf('C%i:ATTeNuation?', hw);
propertyValue = invoke(util, 'getproperty', to_interface, '%g');</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% get the hardware index number
hw = obj(1).HwIndex;

% determines what code to send to the instrument
to_interface = sprintf('C%i:ATTeNuation %i',hw,propertyValue);

% sets the instrument
invoke(util, 'sendcommand', to_interface)
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="Infinity" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the attenuation factor of the specified channel.  The instrument offers a large but discrete set of values for this property.  Incorrect values will be coerced to valid values by the instrument.</Description>
            </Property>
            <Property>
               <Name>Scale</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% get the hardware index number
hw = obj(1).HwIndex;

% Query the instrument.
to_interface = sprintf('C%i:Volt_DIV?',hw);
propertyValue = invoke(util, 'getproperty', to_interface, '%g')</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% get the hardware index number
hw = obj(1).HwIndex;

% determines what code to send to the instrument
to_interface = sprintf('C%i:Volt_DIV %i',hw,propertyValue);

% sets the instrument
invoke(util, 'sendcommand', to_interface);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="Infinity" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>20.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the vertical gain of the specified oscilloscope channel.</Description>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% get the hardware index number
hw = obj(1).HwIndex;

% determines what code to send to the instrument
to_interface = sprintf('C%i:TRAce?',hw);

% queries the instrument
invoke(util, 'sendcommand', to_interface)

% retrieve the value from the instrument
value = invoke(util, 'scanresponse');

% returns the value
propertyValue=value{1};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% get the hardware index number
hw = obj(1).HwIndex;

% determines what code to send to the instrument
to_interface = sprintf('C%i:TRAce %s',hw,propertyValue);

% sets the instrument
invoke(util, 'sendcommand', to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="off" Value="OFF"/>
                     <Enum Name="on" Value="ON "/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Enable or disable the display of the waveform on the scope.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>cursor</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Cursor1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CursorType</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
invoke(get(get(obj, 'Parent'), 'Util'), 'sendcommand', 'CuRsor_MeaSure?');
propertyValue = invoke(get(get(obj, 'Parent'), 'Util'), 'readresponse', '%s');</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
invoke(get(get(obj, 'Parent'), 'Util'), 'setproperty', 'CuRsor_MeaSure', propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="fail" Value="FAIL"/>
                     <Enum Name="horizontal relative" Value="HREL"/>
                     <Enum Name="pass" Value="PASS"/>
                     <Enum Name="vertical absolute" Value="VABS"/>
                     <Enum Name="vertical relative" Value="VREL"/>
                     <Enum Name="custom stat" Value="CUST, STAT"/>
                     <Enum Name="horizontal parameters stat" Value="HPAR, STAT"/>
                     <Enum Name="horizontal relative abs" Value="HREL, ABS"/>
                     <Enum Name="horizontal relative delta" Value="HREL, DELTA"/>
                     <Enum Name="horizontal relative slope" Value="HREL, SLOPE"/>
                     <Enum Name="standard voltage parameters stat" Value="VPAR, STAT"/>
                     <Enum Name="vertical relative abs" Value="VREL, ABS"/>
                     <Enum Name="vertical relative delta" Value="VREL, DELTA"/>
                     <Enum Name="none" Value="OFF"/>
                     <Enum Name="horizontal absolute" Value="HABS"/>
                     <Enum Name="custom" Value="CUST"/>
                     <Enum Name="custom stat" Value="CUST, STAT"/>
                     <Enum Name="horizontal parameters" Value="HPAR"/>
                     <Enum Name="horizontal relative delta + abs" Value="HREL, DELTA+ABS"/>
                     <Enum Name="vertical relative delta + abs" Value="VREL, DELTA+ABS"/>
                     <Enum Name="vertical parameters" Value="VPAR"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>fail</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Selects the cursor type.</Description>
            </Property>
            <Property>
               <Name>HorizontalBarPosition1</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% get the driverData 
driverData = get(device, 'DriverData');

% gets the user specified source
chan = driverData.source;

% determines what code to send to the instrument
to_interface = sprintf('%s:PEr_Cursor_Set? HABS',chan);

% queries the instrument 
invoke(util, 'sendcommand', to_interface)

% retrieve the value from the instrument
idn = invoke(util, 'scanresponse');

% returns the value
if ~isempty(idn)
    propertyValue = idn{2};
end</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% get the driverData 
driverData = get(device, 'DriverData');

% gets the user specified source
chan = driverData.source;

% determines what code to send to the instrument
to_interface = sprintf('%s:PEr_Cursor_Set HABS, %i',chan,propertyValue);

% sets the instrument 
invoke(util, 'sendcommand', to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the first horizontal bar cursor position.</Description>
            </Property>
            <Property>
               <Name>HorizontalBarPosition2</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% get the driverData 
driverData = get(device, 'DriverData');

% gets the user specified source
chan = driverData.source;

% determines what code to send to the instrument
to_interface = sprintf('%s:PEr_Cursor_Set? HREF',chan);

% queries the instrument 
invoke(util, 'sendcommand', to_interface)

% retrieve the value from the instrument
idn = invoke(util, 'scanresponse');

% returns the value
if ~isempty(idn)
    propertyValue = idn{2};
end</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% get the driverData 
driverData = get(device, 'DriverData');

% gets the user specified source
chan = driverData.source;

% determines what code to send to the instrument
to_interface = sprintf('%s:PEr_Cursor_Set HREF, %i',chan,propertyValue);

% sets the instrument 
invoke(util, 'sendcommand', to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the second horizontal bar cursor position.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the driverData 
driverData = get(get(obj, 'Parent'), 'DriverData');

% gets the user specified source
propertyValue = driverData.source;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the driverData 
driverData = get(get(obj, 'Parent'), 'DriverData');

% sets the user specified source
driverData.source = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="channel1" Value="C1"/>
                     <Enum Name="channel2" Value="C2"/>
                     <Enum Name="channel3" Value="C3"/>
                     <Enum Name="channel4" Value="C4"/>
                     <Enum Name="traceA" Value="TA"/>
                     <Enum Name="traceB" Value="TB"/>
                     <Enum Name="traceC" Value="TC"/>
                     <Enum Name="traceD" Value="TD"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Channel1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the waveform that is the source of the vertical and horizontal scale factors used in determining cursor values.</Description>
            </Property>
            <Property>
               <Name>VerticalBarPosition1</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% get the driverData 
driverData = get(device, 'DriverData');

% gets the user specified source
chan = driverData.source;

% determines what code to send to the instrument
to_interface = sprintf('%s:PEr_Cursor_Set? VABS',chan);

% queries the instrument 
invoke(util, 'sendcommand', to_interface)

% retrieve the value from the instrument
idn = invoke(util, 'scanresponse');

% returns the value
if ~isempty(idn)
    propertyValue = idn{2};
end</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% get the driverData 
driverData = get(device, 'DriverData');

% gets the user specified source
chan = driverData.source;

% determines what code to send to the instrument
to_interface = sprintf('%s:PEr_Cursor_Set VABS, %i',chan,propertyValue);

% sets the instrument 
invoke(util, 'sendcommand', to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the first vertical bar cursor position.</Description>
            </Property>
            <Property>
               <Name>VerticalBarPosition2</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% get the driverData 
driverData = get(device, 'DriverData');

% gets the user specified source
chan = driverData.source;

% determines what code to send to the instrument
to_interface = sprintf('%s:PEr_Cursor_Set? VREF',chan);

% queries the instrument 
invoke(util, 'sendcommand', to_interface)

% retrieve the value from the instrument
idn = invoke(util, 'scanresponse');

% returns the value 
if ~isempty(idn)
    propertyValue = idn{2};
end</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% get the driverData 
driverData = get(device, 'DriverData');

% gets the user specified source
chan = driverData.source;

% determines what code to send to the instrument
to_interface = sprintf('%s:PEr_Cursor_Set VREF, %i',chan,propertyValue);

% sets the instrument 
invoke(util, 'sendcommand', to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the second vertical bar cursor position.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>display</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Display1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Contrast</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% queries the instrument 
invoke(util, 'sendcommand', 'INTenSity?')

% retrieve the value from the instrument
idn = invoke(util, 'scanresponse');

% The response looks like TRACE, %val, GRID, %val
% We are only interested in the GRID intensity
propertyValue = idn{4};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% determines what code to send to the instrument
to_interface = sprintf('INTenSity GRID,%i',propertyValue);

% sets the instrument 
invoke(util, 'sendcommand', to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>50</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set or query the contrast of the display grid.  The instrument offers a large but discrete set of values for this property.  Incorrect values will be coerced to valid values by the instrument.</Description>
            </Property>
            <Property>
               <Name>Grid</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
propertyValue = invoke(get(get(obj, 'Parent'), 'Util'), 'getproperty', 'GRID?', '%s');
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
invoke(get(get(obj, 'Parent'), 'Util'), 'setproperty', 'GRID', propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="single" Value="SINGLE"/>
                     <Enum Name="dual" Value="DUAL"/>
                     <Enum Name="quad" Value="QUAD"/>
                     <Enum Name="octal" Value="OCTAL"/>
                     <Enum Name="auto" Value="AUTO"/>
                     <Enum Name="xy" Value="XYONLY"/>
                     <Enum Name="xysingle" Value="XYSINGLE"/>
                     <Enum Name="xydual" Value="XYDUAL"/>
                     <Enum Name="xy" Value="XYONLY"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>single</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the instrument's grid style.</Description>
            </Property>
            <Property>
               <Name>Persistence</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% Tell the instrument you want it to tell you the value
invoke(util, 'sendcommand', 'PErsist_SetUp?');

% queries the instrument 
idn = invoke(util, 'scanresponse');

% retrieve the value from the instrument
if(ischar(idn{1}))
    propertyValue = 'infinite';
else
    propertyValue = idn{1};
end;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% determines what data type is and sets the instrument
if(ischar(propertyValue))
    fmt = '%s';
else
    fmt = '%g';
end

invoke(util, 'sendcommand', sprintf(['PErsist_SetUp ', fmt, ',ALL'],propertyValue));







</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="infinite" Value="infinite"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="Infinity" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>infinite</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the length of time that data points are displayed.</Description>
            </Property>
            <Property>
               <Name>Style</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
propertyValue = invoke(get(get(obj, 'Parent'), 'Util'), 'getproperty', 'DoT_JoiN?', '%s');</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
invoke(get(get(obj, 'Parent'), 'Util'), 'setproperty', 'DoT_JoiN', propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="dots" Value="ON"/>
                     <Enum Name="vectors" Value="OFF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Dots</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Selects how to display the waveform data.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>measurement</Name>
         <Description/>
         <Command/>
         <Size>5</Size>
         <Mappings>
            <ChannelMap Command="IMMED" Index="5"/>
            <ChannelMap Command="MEAS4" Index="4"/>
            <ChannelMap Command="MEAS3" Index="3"/>
            <ChannelMap Command="MEAS2" Index="2"/>
            <ChannelMap Command="MEAS1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>MeasurementType</Name>
               <Location>measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% gets the measurement type from driverData
driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.measurment.type;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the driverData 
driverData = get(get(obj, 'Parent'), 'DriverData');

% sets the user specified source
driverData.measurment.type = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData) 
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="frequency" Value="FREQ"/>
                     <Enum Name="mean" Value="MEAN"/>
                     <Enum Name="period" Value="PER"/>
                     <Enum Name="peak2peak" Value="PK2PK"/>
                     <Enum Name="crms" Value="CRM"/>
                     <Enum Name="amplitude" Value="AMPL"/>
                     <Enum Name="area" Value="AREA"/>
                     <Enum Name="base" Value="BASE"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>frequency</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or query the measurement type.  By default this driver supports the standard measurement types of the oscilloscope, and does not include any measurements supported only by expansion modules.  To add additional measurement types supported by your model, edit the driver using midedit.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% gets the source from driverData
driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.measurment.source; 
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the driverData 
driverData = get(get(obj, 'Parent'), 'DriverData');

% sets the user specified source
driverData.measurment.source = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData) 
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="channel1" Value="C1"/>
                     <Enum Name="channel2" Value="C2"/>
                     <Enum Name="channel3" Value="C3"/>
                     <Enum Name="channel4" Value="C4"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>channel1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the source of the measurement.</Description>
            </Property>
            <Property>
               <Name>Value</Name>
               <Location>measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% gets channel to use for measurement from driverData
driverData = get(get(obj, 'Parent'), 'DriverData');
chan = driverData.measurment.source;

% gets the measurement type
type = driverData.measurment.type;

% determines what code to send to the instrument
to_interface = sprintf('%s:PArameter_VAlue? %s',chan,type);

% queries the instrument 
invoke(util, 'sendcommand', to_interface)

% retrieve the value from the instrument
idn = invoke(util, 'scanresponse');

% returns the value
propertyValue = idn{2};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the value of a measurement.  If the object is the immediate measurement object (the HwName property is 'IMMED') this property is always valid.  For the standard periodic measurements, it is only a valid valid if the MesesurementType is not 'none'.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>sequence</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Sequence1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Max</Name>
               <Location>sequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% queries the instrument 
invoke(util, 'sendcommand', 'SEQUENCE?');

% retrieve the value from the instrument 
idn = invoke(util, 'scanresponse');
propertyValue = idn{3};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% queries the instrument 
invoke(util, 'sendcommand', 'SEQUENCE?');

% retrieve the value from the instrument 
idn = invoke(util, 'scanresponse');
if(strcmp('OFF',idn{1}))
    warning('mode is set to OFF right now and is being changed to ON so that max can be changed')
end

% determines what code to send to the instrument
to_interface = sprintf('SEQUENCE ON,%g,%g ',idn{2},propertyValue);

% sets the instrument 
invoke(util, 'sendcommand', to_interface) </SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="Infinity" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>50</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the max size of the sequence mode.  The instrument offers a large but discrete set of values for this property.  Incorrect values will be coerced to valid values by the instrument.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>sequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% queries the instrument 
invoke(util, 'sendcommand', 'SEQUENCE?');

% retrieve the value from the instrument 
idn = invoke(util, 'scanresponse');

% returns the value
propertyValue = idn{1};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% determines what code to send to the instrument
to_interface = sprintf('SEQUENCE %s',propertyValue);

% sets the instrument 
invoke(util, 'sendcommand', to_interface) 

</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="ON"/>
                     <Enum Name="off" Value="OFF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the sequence mode.</Description>
            </Property>
            <Property>
               <Name>Segment</Name>
               <Location>sequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% queries the instrument 
invoke(util, 'sendcommand', 'SEQUENCE?');

% retrieve the value from the instrument 
idn = invoke(util, 'scanresponse');

% returns the value
propertyValue = idn{2};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% gets the mode from the instrument
invoke(util, 'sendcommand', 'SEQUENCE?');

% retrieve the value from the instrument 
idn = invoke(util, 'scanresponse');

% determines what code to send to the instrument
to_interface = sprintf('SEQUENCE %s,%i',idn{1},propertyValue);

% sets the instrument 
invoke(util, 'sendcommand', to_interface);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>50.0</Value>
                     <Value>200.0</Value>
                     <Value>500.0</Value>
                     <Value>2000.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>50</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the max number of segments.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>system</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>loadstate</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadstate(obj, location)
% OBJ is the group object.
% LOCATION is the specified storage location

%get the icdevice
device = get(obj, 'Parent');
util = get(device, 'Util');

% Error checking
    % LOCATION must be a scalar and between 1 and 5, inclusive.
    if ~isnumeric(location) 
        error('LOCATION must be numeric');
    elseif location ~= floor(location)
        error('LOCATION must be a scalar');
    elseif  location &gt;5 || location &lt;1
            error('LOCATION must be between 1 and 5 inclusive');
    end
    
% Send memory name query command
invoke(util, 'sendcommand', ['*RCL ' num2str(location)])
</MCode>
               </Code>
               <Description>LOADSTATE  Recall a previously stored state.

INVOKE(OBJ, 'loadstate', location) restores the state of the oscilloscope from a copy of settings stores in memory.  Location must be a scalar from 1 to 5.</Description>
            </Method>
            <Method>
               <Name>savestate</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function savestate(obj, location)
% OBJ is the group object.
% LOCATION is the specified storage location

%get the icdevice
device = get(obj, 'Parent');
util = get(device, 'Util');

% Error checking
    % LOCATION must be a scalar and between 1 and 5, inclusive.
    if ~isnumeric(location) 
        error('LOCATION must be numeric');
    elseif location ~= floor(location)
        error('LOCATION must be a scalar');
    elseif  location &gt;5 || location &lt;1
            error('LOCATION must be between 1 and 5 inclusive');
    end
    
% Send memory name query command
invoke(util, 'sendcommand', ['*SAV ' num2str(location)])
</MCode>
               </Code>
               <Description>SAVESTATE  Save the current state of the oscilloscope.

INVOKE(OBJ,'savestate',location) stores an instrument configuration at the specified memory location, LOCATION.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Coupling</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
 
% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');
 
% get the hardware index number
hw = obj.HwIndex;
 
% determines what code to send to the instrument
to_interface = sprintf('C%i:TRIG_COUPLING?',hw);
 
% queries the instrument 
invoke(util, 'sendcommand', to_interface);
 
% retrieve the value from the instrument
value = invoke(util, 'scanresponse');
propertyValue = value{1};
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% get the hardware index number
hw = obj.HwIndex;

% determines what code to send to the instrument
to_interface = sprintf('C%i:CouPLing %s', hw, propertyValue);

% sets the instrument
invoke(util, 'sendcommand', to_interface);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="ac1m" Value="AC1M"/>
                     <Enum Name="dc1m" Value="DC1M"/>
                     <Enum Name="50ohms" Value="DC50"/>
                     <Enum Name="ground" Value="GND"/>
                     <Enum Name="dc" Value="DC"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>dc</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the signal coupling type at the input of the trigger circuit.  </Description>
            </Property>
            <Property>
               <Name>Level</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
propertyValue = invoke(get(get(obj, 'Parent'), 'Util'), 'getproperty', 'TRig_LeVel?', '%g')</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
invoke(get(get(obj, 'Parent'), 'Util'), 'setproperty', 'TRig_LeVel', propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the oscilloscope primary trigger level.  Max and Min values are dependent on the scale of channel type.  The instrument offers a large but discrete set of values for this property.  Incorrect values will be coerced to valid values by the instrument.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
propertyValue = invoke(get(get(obj, 'Parent'), 'Util'), 'getproperty', 'TRig_MoDe?', '%s');</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
invoke(get(get(obj, 'Parent'), 'Util'), 'setproperty', 'TRig_MoDe', propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="auto" Value="AUTO"/>
                     <Enum Name="run" Value="NORM"/>
                     <Enum Name="single" Value="SINGLE"/>
                     <Enum Name="stop" Value="STOP"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>auto</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the trigger mode for the edge trigger type.</Description>
            </Property>
            <Property>
               <Name>Slope</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
propertyValue = invoke(get(get(obj, 'Parent'), 'Util'), 'getproperty', 'TRig_SLope?', '%s');</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
invoke(get(get(obj, 'Parent'), 'Util'), 'setproperty', 'TRig_SLope', propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="falling" Value="NEG"/>
                     <Enum Name="rising" Value="POS"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>rising</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Selects a rising or falling slope for the main edge trigger.  This is equivalent to setting Slope in the Trigger menu.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

 %get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% queries the instrument
invoke(util, 'sendcommand', 'TRig_SElect?')

% retrieve the value from the instrument
idn = invoke(util, 'scanresponse');

% returns the just the source value 
propertyValue = idn{3};
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% queries the instrument
invoke(util, 'sendcommand', 'TRig_SElect?')

% retrieve the value from the instrument
idn = invoke(util, 'scanresponse');

% determines what code to send to the instrument
to_interface = sprintf('TRig_SElect %s,SR,%s',idn{1},propertyValue);

% sets the instrument
invoke(util, 'sendcommand', to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="channel1" Value="C1"/>
                     <Enum Name="channel2" Value="C2"/>
                     <Enum Name="external" Value="EX"/>
                     <Enum Name="external10" Value="EX10"/>
                     <Enum Name="channel3" Value="C3"/>
                     <Enum Name="channel4" Value="C4"/>
                     <Enum Name="acline" Value="LINE"/>
                     <Enum Name="etm10" Value="ETM10"/>
                     <Enum Name="pa" Value="PA"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>channel1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets of the source for the main edge trigger.  This is equivalent to setting Source in the Trigger menu.</Description>
            </Property>
            <Property>
               <Name>TriggerType</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% queries the instrument
invoke(util, 'sendcommand', 'TRig_SElect?')

% retrieve the value from the instrument
idn = invoke(util, 'scanresponse');

% gets just the trigger type
propertyValue = idn{1};
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% determines what code to send to the instrument
to_interface = sprintf('TRig_SElect %s',propertyValue);

% sets the instrument
invoke(util, 'sendcommand', to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="edge" Value="EDGE"/>
                     <Enum Name="drop" Value="DROP"/>
                     <Enum Name="glitch" Value="GLIT"/>
                     <Enum Name="interval" Value="INTV"/>
                     <Enum Name="stateQualified" Value="SQ"/>
                     <Enum Name="edgeQualified" Value="TEQ"/>
                     <Enum Name="standard" Value="STD"/>
                     <Enum Name="singleSource" Value="SNG"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>edge</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the type of oscilloscope trigger.  This is equivalent to setting Type in the Trigger menu.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>trigger</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function trigger(obj)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

invoke(get(get(obj, 'Parent'), 'Util'), 'sendcommand', '*TRG');</MCode>
               </Code>
               <Description>TRIGGER Trigger the instrument.

INVOKE(OBJ,'TRIGGER') performs a Group Execute trigger.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>util</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="util1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>buildheader</Name>
               <Location>util</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function header = buildheader(obj, msgLength, operationFlags, sequenceNumber)
%BUILDHEADER Builds the LeCroy VICP header
% 
% Usage:
%   header = buildheader(msgLength,{{operationFlag},{sequenceNumber}});
%
%   msgLength is the length of the message you want to send.
%   operationFlags {optional} is a structure holding the operation
%           information of DATA,REMOTE,LOCKOUT,CLEAR,SRQ,SERIALPOLL,EOI.
%           It may be passes as an empty array or struct.
%   sequenceNumber {optional} is the sequence of data when splitting data
%           across packets.
%
%   header is the 8 byte header needed for the message 
%
% VICP Headers:
%
%	    Byte	Description
%	    ------------------------------------------------
%		 0		Operation
%		 1		Version		1 = version 1
%		 2		Sequence Number { 1..255 }, (was unused until June 2003)
%		 3		Unused
%	 	 4		Block size, MSB	 (not including this header)
%		 5		Block size
%		 6		Block size
%		 7		Block size, LSB

    operationStruct.Data = true;        % This is always true but leaving it for consistency
    operationStruct.Remote = false;     % Remote control 
    operationStruct.Lockout = false;    % Lockout front panel
    operationStruct.Clear = false;      % Clear
    operationStruct.SRQ = false;        %
    operationStruct.SerialPoll = false; %
    operationStruct.EOI = true;         % End Of Message

    % With no arguments, return the default header parameters.
    if ~exist('msgLength', 'var')
        header = operationStruct;
        return
    end

    % If flags are passed, use them in place of the defualts.  
    if (exist('operationFlags','var') &amp;&amp; ~isempty(operationFlags))
        names = fieldnames(operationFlags);
        for field=names
            operationStruct.(field) = operationFlags.(field);
        end
    end

    % If user did not specify the SequenceNumber then defualt to 1.
    if ~exist('sequenceNumber', 'var')
        sequenceNumber = 1;             
    end

    % Build Operation Flag for header
    operation =   uint8(0);
    operation =	bitset(operation,8,operationStruct.Data);       % 0x80 Data block
    operation =	bitset(operation,7,operationStruct.Remote);     % 0x40 Remote Mode
    operation =	bitset(operation,6,operationStruct.Lockout);    % 0x20 Local Lockout (Lockout front panel)
    operation =	bitset(operation,5,operationStruct.Clear);      % 0x10 Device Clear (if sent with data, clear occurs before block is passed to parser)
    operation =	bitset(operation,4,operationStruct.SRQ);        % 0x08 SRQ (Device -&gt; PC only)
    operation =	bitset(operation,3,operationStruct.SerialPoll); % 0x04 SerialPoll
    operation =	bitset(operation,1,operationStruct.EOI);        % 0x01 Block terminated in EOI

    header = zeros(1,8,'uint8');        % Initialize header size
    header(1) = operation;              % Operation Byte
    header(2) = uint8(1);               % Version
    header(3) = uint8(sequenceNumber);  % Seq
    header(4) = 0;                      % Reserved

    % Build the length info for header
    for i=1:4
        placeValue = 256^(4-i);
        header(4+i) = uint8(floor(msgLength/placeValue));
        msgLength = mod(msgLength, placeValue);
    end
    header = char(header);
</MCode>
               </Code>
               <Description>BUILDHEADER Builds the LeCroy VICP header
 
 Usage:
   header = INVOKE(obj, 'buildheader', msgLength,{{operationFlag},{sequenceNumber)));

   msgLength is the length of the message you want to send.
   operationFlags {optional} is a structure holding the operation
           information of DATA,REMOTE,LOCKOUT,CLEAR,SRQ,SERIALPOLL,EOI.
   sequenceNumber {optional} is the sequence of data when splitting data
           across packets.

   header is the 8 byte header needed for the message </Description>
            </Method>
            <Method>
               <Name>getproperty</Name>
               <Location>util</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function propertyValue = getproperty(obj, property, fmt)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

device = get(obj, 'Parent');
util = get(device, 'Util');

% queries the instrument 
invoke(util, 'sendcommand',  property);

% Retrieve the result from the instrument.
propertyValue = invoke(util, 'readresponse', fmt);

% Remove whitespace and convert to the desired format.
if ischar(propertyValue)
    propertyValue = regexp(propertyValue, '(\S+)', 'tokens', 'once');
    propertyValue = propertyValue{1};
    propertyValue = sscanf(propertyValue, fmt);
end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>parseheader</Name>
               <Location>util</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [msgLength, operationFlags, sequenceNumber] = parseheader(obj, header)
%PARSEVICPHEADER Parses the LeCroy VICP header
%
% Usage:
%   [msgLength, operationalFlags, sequenceNumber] = parseVicpHeader(header);
%
%   header is the 8 byte message header from a LeCroy VICP message.  
%
%   msgLength is the length in bytes of the accompanying message.
%   operationFlags is a structure holding the operation
%           information of DATA,REMOTE,LOCKOUT,CLEAR,SRQ,SERIALPOLL,EOI.
%   sequenceNumber is the sequence of data when splitting data
%           across packets.
%
% VICP Headers:
%
%	    Byte	Description
%	    ------------------------------------------------
%		 0		Operation
%		 1		Version		1 = version 1
%		 2		Sequence Number { 1..255 }, (was unused until June 2003)
%		 3		Unused
%	 	 4		Block size, MSB	 (not including this header)
%		 5		Block size
%		 6		Block size
%		 7		Block size, LSB

    % The header must be 8 bytes
    headerLength = 8;
    if length(header)~=headerLength
        error('parseheader::Invalid header argument.  Header must be 8 bytes.')
    end
    
    % Extract the distinct portions of the header
    operation = uint8(header(1));       % Operation Byte
    version   = double(header(2));      % Version
    sequenceNumber = double(header(3));	% Seq
    %header(4);                         % Reserved and unused
    
    % Parse the operation
    operationFlags.Data    = bitget(operation,8);    % 0x80 Data block
    operationFlags.Remote  = bitget(operation,7);    % 0x40 Remote Mode
    operationFlags.Lockout = bitget(operation,6);    % 0x20 Local Lockout (Lockout front panel)
    operationFlags.Clear   = bitget(operation,5);    % 0x10 Device Clear (if sent with data, clear occurs before block is passed to parser)
    operationFlags.SRQ     = bitget(operation,4);    % 0x08 SRQ (Device -&gt; PC only)
    operationFlags.SerialPoll = bitget(operation,3); % 0x04 SerialPoll
    operationFlags.EOI     = bitget(operation,1);    % 0x01 Block terminated in EOI

    % Parse the length
    msgLength = 0;
    for i=1:4
        msgLength = msgLength + header(i+4)*256^(4-i);
    end
    
</MCode>
               </Code>
               <Description>PARSEHEADER Parses the LeCroy VICP header

 Usage:
   [msgLength, operationalFlags, sequenceNumber] = INVOKE(obj, 'parseheader', header);

   header is the 8 byte message header from a LeCroy VICP message.  

   msgLength is the length in bytes of the accompanying message.
   operationFlags is a structure holding the operation
           information of DATA,REMOTE,LOCKOUT,CLEAR,SRQ,SERIALPOLL,EOI.
   sequenceNumber is the sequence of data when splitting data
           across packets.</Description>
            </Method>
            <Method>
               <Name>readbin</Name>
               <Location>util</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function data = readbin(obj, type)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

device = get(obj, 'Parent');
driverData = get(device, 'driverData');

%get the interface
interface = get(device, 'Interface');

% Initialize the result.
data = [];

% Determine the size of each element to be read.  
sampleElement = cast(1, type);
sampleElementProperties = whos('sampleElement');
elementSize = sampleElementProperties.bytes;

if driverData.isTcpip
%RECEIVEVICPMESSAGE receive the message using LeCroy's VCIP packet format
%
% Usage:
%   message = receiveVicpMessage(tcpipObj)

    EOI = false;
    headerLength = 8;
    % Read and concatenate until an EOI is found.
    while ~EOI
        header = fread(interface, headerLength, 'uint8');
        [dataLength, operationFlags, sequenceNumber] = invoke(obj, 'parseheader', header);
        dataLength = dataLength/elementSize;
        data = [data; fread(interface, dataLength, type)];
        EOI = operationFlags.EOI;
    end

else
    % Read one less than the InputBufferSize to allow us to check for EOI
    elementsToRead = get(interface, 'InputBufferSize')/elementSize; 
    msg = [];
    foundEoiMsg = 'The EOI line was asserted before SIZE values were available.';
    timeoutSubMsg  = 'timeout';
    % Read and concatenate while there is no EOI or timeout.
    % If the data to be read is exactly InputBufferSize, FREAD will fail with
    % a timeout.  This should be rare however.
    while isempty(msg) %(~strcmp(msg, foundEoiMsg) || isempty(findstr(msg, timeoutSubMsg)))
        [newData, count, msg] = fread(interface, elementsToRead, type);
        data = [data; newData];
    end
    
    % TODO: If the msg was not a timeout or EOI, it should be reported.
end

%data = cast(data, type);
    </MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>readresponse</Name>
               <Location>util</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function msg = readresponse(obj, fmt)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

% Make sure fmt was passed before reading the data.
if ~exist('fmt', 'var')
    error('Util::READRESPONSE requires two arguments');
end

% Read all available input and format it appropriately.
msg = sscanf(char(invoke(obj, 'readbin', 'int8')), [fmt, '\n']);
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>scanresponse</Name>
               <Location>util</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function out = scanresponse(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

%read the value
response = invoke(obj, 'readresponse', '%s');

% This behaves much like SCANSTR
% by splitting the string into a cell array.
delimiter = ',; ';
format = '%s';

if ~ischar(response)
    response = char(response);
end

[data, count, msg] = sscanf(response, '%c');

out=strread(data,format,'delimiter',delimiter);
for i = 1:length(out)
    if ~isnan(str2double(out{i}))
        out{i} = str2double(out{i});
    end
end




</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>sendbin</Name>
               <Location>util</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function sendbin(obj, data, type)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

% Calculate the data size.
s = whos('data');

device = get(obj, 'Parent');
driverData = get(device, 'driverData');

%get the interface
interface = get(device, 'Interface');

if driverData.isTcpip
    MAXPACKET = 2^10;

    % Check for correct size of msg
    if 1~=min(size(data))
        error('MSG must be a vector.')
    end

%     if length(data)&gt;MAXPACKET
%         error('We currently only support sending messages under 2k long');
%     end

    header = invoke(obj, 'buildheader', length(data));
    fwrite(interface, [header,data], type);
    
else
    fwrite(interface, data, type);
end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>sendcommand</Name>
               <Location>util</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function sendcommand(obj, cmd)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

invoke(obj, 'sendbin', cmd, 'char'); %perhaps this should be 'char'
    </MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>setproperty</Name>
               <Location>util</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setproperty(obj, property, propertyValue)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

% build the command string with either a string or numeric argument
if ischar(propertyValue)
    fmt = '%s %s';
else
    fmt = '%s %g';
end
cmd = sprintf(fmt, property, propertyValue);
% queries the instrument
invoke(obj, 'sendcommand', cmd);
                  </MCode>
               </Code>
               <Description/>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>waveform</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Waveform1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ByteOrder</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
propertyValue = invoke(get(get(obj, 'Parent'), 'Util'), 'getproperty', 'Comm_ORDer?', '%s');</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
invoke(get(get(obj, 'Parent'), 'Util'), 'setproperty', 'Comm_ORDer', propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="bigEndian" Value="HI"/>
                     <Enum Name="littleEndian" Value="LO"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>littleEndian</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries which byte of binary waveform data is transmitted first during a waveform transfer.</Description>
            </Property>
            <Property>
               <Name>EndingPoint</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% queries the instrument 
invoke(util, 'sendcommand', 'WaveForm_SetUp?')

% retrieve the value from the instrument
idn = invoke(util, 'scanresponse');
endpnt = idn{6}+idn{4};

% returns the value calculated
propertyValue = endpnt;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% queries the instrument 
invoke(util, 'sendcommand', 'WaveForm_SetUp?')

% retrieve the value from the instrument
idn = invoke(util, 'scanresponse');
endpt = propertyValue - idn{6};

% sets the instrument 
if(endpt &lt; 0)
    warning('endpoint needs to be larger then the first point')
else
    invoke(util, 'sendcommand', sprintf('WaveForm_SetUp  NP,%i',endpt));
end
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="2500.0" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the ending point for waveformm data transfers.</Description>
            </Property>
            <Property>
               <Name>FirstPoint</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% queries the instrument 
invoke(util, 'sendcommand', 'WaveForm_SetUp?')

% retrieve the value from the instrument
idn = invoke(util, 'scanresponse');

% returns only the first point
propertyValue = idn{6};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% sets the instrument 
invoke(util, 'sendcommand', sprintf('WaveForm_SetUp  FP,%i',propertyValue));




</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="2500.0" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the starting point for waveformm data transfers.</Description>
            </Property>
            <Property>
               <Name>MaxNumberPoint</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% queries the instrument 
invoke(util, 'sendcommand', 'WaveForm_SetUp?')

% retrieve the value from the instrument
idn = invoke(util, 'scanresponse');

% returns only the maxnumberpoint
propertyValue = idn{4};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% determines what code to send to the instrument
to_interface = sprintf('WaveForm_SetUp  NP,%i',propertyValue);

% sets the instrument 
invoke(util, 'sendcommand', to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The maximum number of acqusition data points.</Description>
            </Property>
            <Property>
               <Name>Precision</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% queries the instrument 
invoke(util, 'sendcommand', 'COMM_FORMAT?')

% retrieve the value from the instrument
idn = invoke(util, 'scanresponse');
propertyValue = sprintf('%s,%s',idn{2},idn{3});</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

% determines what code to send to the instrument
to_interface = sprintf('COMM_FORMAT DEF9, %s',propertyValue);

% sets the instrument 
invoke(util, 'sendcommand', to_interface)
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="ASCII" Value="WORD,HEX"/>
                     <Enum Name="int16" Value="WORD,BIN"/>
                     <Enum Name="int8" Value="BYTE,BIN"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>ASCII</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the precision  for waveformm data transfers.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>readwaveform</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [y, x, yunit, xunit, header] = readwaveform(obj, source, scaleWaveform)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

% sees if there is any input
if (nargin == 0)
    return;
end

% initializes everything to empty/false/unknown
scale = true;
y = [];
x = [];
yunit = 'unknown';
xunit = 'unknown';
 
% checks to see if the source input is a valid value
validValues = {'channel1','channel2','channel3','channel4','traceA','traceB','traceC','traceD','memory1','memory2','memory3','memory4'};
scopeValues = {'C1', 'C2', 'C3', 'C4', 'TA', 'TB', 'TC', 'TD', 'M1', 'M2', 'M3', 'M4',};
idx = strmatch(source,validValues, 'exact');

% gives error if the channel is not a valid value
if (isempty(idx))
    error('Invalid SOURCE. CHANNEL must be one of: channel1, channel2, channel3, channel4,traceA, traceB, traceC, traceD, memory1, memory2, memory3 , memory4');
end

% sets the source to its property value
trueSource = scopeValues{idx};

% checks to see if the scale entered is a valid value
if exist('scaleWaveform', 'var')
        scale = scaleWaveform;
end

device = get(obj, 'Parent');
util = get(device, 'Util');

% get the driverdata
driverData = get(device, 'DriverData');
wd = driverData.wd;

% stores the old user setings
oldPrecision = get(obj, 'Precision');
oldByteOrder = get(obj, 'ByteOrder');

% changes the precision and byteorder so that wave form can be read
%set(obj, 'Precision', 'int8');
set(obj, 'ByteOrder', 'littleEndian');

% gets wave from the instrument
if strcmp(oldPrecision,'int8')
    try 
        % Issue the curve transfer command.
        to_interface = sprintf('%s:WaveForm? ALL',trueSource);
        invoke(util, 'sendcommand', to_interface);

        % get wave from the instrument
        raw = invoke(util, 'readbin', 'int8');

        % separates the data from the descriptor block 
        y = raw(362:end');
        %header = raw(1:361)';
        header = raw(1:361)';
    catch
        % return the settings back to what the user had them and display
        % an error that tells why the waveform was not read
        set(obj, 'Precision', oldPrecision);
        set(obj, 'ByteOrder', oldByteOrder);
        error(lasterr)  
    end

    % make sure that data was
    if (isempty(raw))
        % returns the settings back to what the user had them and displays
        % an error that the waveform did not get read in
        set(obj, 'Precision', oldPrecision);
        set(obj, 'ByteOrder', oldByteOrder);
        error('An error occurred while reading the waveform.');
    end
  elseif strcmp(oldPrecision,'int16')
     try 
         % Issue the Header transfer command.
         to_interface = sprintf('%s:WaveForm? ALL',trueSource);
         invoke(util, 'sendcommand', to_interface);
 
         % get wave from the instrument
         raw = invoke(util, 'readbin', 'int8');
 
         % separates the data from the descriptor block 
         header = raw(1:361)';
         for i=1:floor((length(raw)-362)/2);
            y(i)=raw(362+(i-1)*2)*256+raw((363+(i-1)*2))';
         end
%          %then get the data
%          to_interface = sprintf('%s:WaveForm? WAVE_ARRAY_1',trueSource);
%          invoke(util, 'sendcommand', to_interface);
%  
%          % get wave from the instrument
%          raw = invoke(util, 'readbin', 'int16');        
%          
%          y = raw(8:end); %need to check this
 
         
     catch
         % return the settings back to what the user had them and display
         % an error that tells why the waveform was not read
         %set(obj, 'Precision', oldPrecision);
         set(obj, 'ByteOrder', oldByteOrder);
         error(lasterr)  
     end
 
     % make sure that data was
     if (isempty(raw))
         % returns the settings back to what the user had them and displays
         % an error that the waveform did not get read in
         %set(obj, 'Precision', oldPrecision);
         set(obj, 'ByteOrder', oldByteOrder);
         error('An error occurred while reading the waveform.');
     end
else
  error('Ascii prcsision not allowed for WF transfer');
end


xunit=wd.getHORUNIT(header);
yunit=wd.getVERTUNIT(header);

% Rescale the waveform is requested.
if scale
    % rescale the Y
    y = y .* wd.getVERTICAL_GAIN(header) - wd.getVERTICAL_OFFSET(header);
end

% Calculate the horizontal points.
x = ((0:double(wd.getWAVE_ARRAY_COUNT(header))).*wd.getHORIZ_INTERVAL(header)...
    + wd.getHORIZ_OFFSET(header))';

x = x';
y = y';

% Restore initial settings
set(obj, 'Precision', oldPrecision);
set(obj, 'ByteOrder', oldByteOrder);
    </MCode>
               </Code>
               <Description>READWAVEFORM Transfer waveforms from the oscilloscope to MATLAB.

[Y, T, XUNIT, YUNIT, HEADER] = INVOKE(obj, 'readwaveform', CHANNEL) returns a waveform from the instrument,
using channel string, CHANNEL.  Valid channel values are channel&amp;lt;x&amp;gt;, trace&amp;lt;x&amp;gt;, and
memory&amp;lt;z&amp;gt;, where &amp;lt;x&amp;gt; is a number between 1 and the number of channels on the instrument,  &amp;lt;y&amp;gt; is a letter between A and the number of reference channels on the instrument, and &amp;lt;z&amp;gt; is a number between 1 and the number of memory locations on the instrument.

[Y, T, XUNIT, YUNIT, HEADER] = INVOKE(obj, 'readwaveform', CHANNEL, SCALE) returns the data scaled to real units if SCALE is true, or as raw data if SCALE is false.  The default value for SCALE is true.



To read the waveform data points the interface object associated with the device
object must have a sufficiently large InputBufferSize property value.  If you receive
an error about the buffer size being to small, or have difficulty reading a waveform,
verify that it is large enough.  The size must be greater than two times the number
of points in the waveform, plus approximately 50 bytes for header information.

Example:
	[y, t] = invoke(obj, 'readwaveform', 'channel1');
	[y, t] = invoke(obj, 'readwaveform', 'referenceA', false);

Example changing the buffer size:
	% Note the device object must be closed.
	interfaceObj = get(deviceObj, 'interface');
	% Allow for a 10,000 point waveform with a little extra room.
	set(interfaceObj, 'InputBufferSize', 21000);
	connect(deviceObj);
	[y, t] = invoke(obj, 'readwaveform', 'channel1');


</Description>
            </Method>
            <Method>
               <Name>storewaveform</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function storewaveform(obj, channel, location)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

% get the device
device = get(obj, 'Parent');
util = get(device, 'Util');

scopeValuesC = {'C1', 'C2', 'C3', 'C4', 'TA', 'TB', 'TC', 'TD'};
scopeValuesM = {'M1', 'M2', 'M3', 'M4'};

% checks to see if location is a valid value
idxM = strmatch(lower(location), {'memory1','memory2','memory3','memory4'}, 'exact');
if (isempty(idxM))
    error('Invalid value.LOCATION must be one of: memory1, memory2, memory3, memory4');
end
trueLocation = scopeValuesM{idxM};

% checks to see if channel is a valid value
idxC = strmatch(lower(channel),{'channel1','channel2','channel3','channel4','tracea','traceb','tracec','traced'} , 'exact');
if (isempty(idxC))
    error('Invalid value.CHANNEL must be one of: channel1, channel2, channel3, channel4, traceA, traceB, traceC, traceD');
end
trueChannel = scopeValuesC{idxC};

% determines what code to send to the instrument
to_interface = sprintf('STOre %s,%s',trueChannel,trueLocation);

% sets the instrument
invoke(util, 'sendcommand', to_interface)</MCode>
               </Code>
               <Description>STOREWAVEFORM Save a waveform to oscilloscope memory.

INVOKE(OBJ, 'storewaveform', CHANNEL, LOCATION) saves the waveform from CHANNEL to memory location, LOCATION.

Example:
	invoke(obj, 'storewaveform', 'channel1','memory1');
	</Description>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>